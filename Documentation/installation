Requirements

	1. a VPC with two subnets, at least one of them have Internet access.
	2. a role with permission to manage EC2 instances and roles.
	3. a public/private key.

Below is a full example to setup AWS environment. Resources are tagged using the following convention : 
tag Key : Name 
tag Value : jupyter_{RESOURCENAME} 

You don't need to follow our resource tag convention since it used for illustration.

Create and configure the VPC, Subnets, Internet Gateway and routing tables

From AWS Console -> VPC -> VPC Dashboard -> Start VPC Wizard

	IP CIDR block:* 10.10.0.0/16
	VPC name:jupyter_vpc
	Public subnet:* 10.10.0.0/24
	Availability Zone:* us-east-1c
	Public subnet name: jupyter_manager_sub
	Private subnet:* 10.10.128.0/17
	Availability Zone:* us-east-1d
	Private subnet name: jupyter_worker_sub
	Elastic IP Allocation ID:* eipalloc-b...
	Enable DNS hostnames:* : yes
	Hardware tenancy:* : Default
	Create the required roles

You can also use the cloudFormation template,vpc-with-one-managers-and-one-workers-subnets-template.json, we provided to create the VPC and the required subnets. 
Write down the VPC ID, Managers SUBNET ID and the Workers SUBNET ID.For Example : 
VPC ID : vpc-92929292
Managers SUBNET ID : subnet-54502979
Workers SUBNET ID : subnet-fd9bb4b4
 


Roles are required by the : 
1. The machine that will launch the script to create the jupytehub mangers (If AWS Access/Secret keys is not used). 
This machine need to have permission to manage EC2 instances and roles.
2. The cluster managers to manage users ipython notebook instances. 
One role with EC2 management permission and role assignment permission will be sufficient, lets call it "jupyter_role" 
From IAM -> Policies -> Create Policy -> Create Your Own Policy -> Policy Name : jupyter_role -> Policy Document: 


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "ec2:*",
            "Effect": "Allow",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "cloudwatch:*",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile",
                "iam:ListInstanceProfiles",
                "iam:ListInstanceProfilesForRole",
                "iam:ListRoles",
                "iam:RemoveRoleFromInstanceProfile",
                "iam:GetInstanceProfile",
                "iam:PassRole"
            ],
            "Resource": "*"
        }
    ]
}


From IAM -> Roles -> Create New Role -> Select role type -> AWS Service Role: Amazon EC2 (Select) -> Attach Policy : jupyter_role ->
Role Name: jupyter_role -> Create Role

Write Down the ARN profile "arn:aws:iam::063463463463:instance-profile/jupyter_role" as it will be needed later to launch the cluster.


Create SSH Keys

The ssh key will be used by the the machine that will launch the script to access and configure jupytehub manger(s).
And it will be used by the cluster managers to access the users ipython notebook instances. 
To create the key:
AWS Console -> EC2 Dashbord -> Key Pairs -> Create Key Pair -> Key pair name: jupyter_key 
Save the private key "jupyter_key.pem" and send it to the machine that will run the launch script to create jupyterhub manager(s).

Create the EC2 GW machine with role (CentOS7)

Create EC2 instance in the a public subnet with "jupyter_role" role. This instance will be used to create jupyterhub cluster.
Assume the instance IP is : 54.224.174.155 

Create the Cluster

# Move the key to the GW machine (IP: 54.224.174.155)
scp jupyter_key.pem 54.224.174.155:/tmp/

# login to the GW and be root
ssh 54.224.174.155
sudo su - 

# move the key to a .ssh folder in root
mv /tmp/jupyter_key.pem .ssh/
chmod 600 .ssh/jupyter_key.pem 

# update the machine
yum update -y

# Install required packages
yum install git python2-pip gcc python-devel openssl-devel -y 


# Install git and clone the repository
git clone https://github.com/harvard/cloudJHub.git

# cd to the repo folder and install the requirements packages
cd cloudJHub/
pip install -r launch_cluster/requirements.txt


# Prepare the secure.py file. Require: 
# VPC ID of the VPC created above ,   
# key path and name :  
# role profile of "jupyter_role" role 

cat > launch_cluster/secure.py << EOF
 AWS_ACCESS_KEY_ID = ""
 AWS_SECRET_KEY = ""
 KEY_NAME = "jupyter_key"
 KEY_PATH = "/root/.ssh/%s.pem" % KEY_NAME
 MANAGER_IAM_ROLE = "arn:aws:iam::063463463463:instance-profile/jupyter_role"
 VPC_ID = "vpc-92929292"
 EOF

# Prepare the users and admins 
cat > jupyterhub_files/userlist  << EOf
__tokengeneratoradmin admin
youremail@domain admin
EOF

# Prepare the SSL
# SSL Certificate can be added to the manager during before of after the launch time. To add them beefore the launch then 
# first copy your ssl certificate and key (say jupyterhub.cer , and jupyterhub.key) to the ssl folder, then
# open jupyterhub_files/jupyterhub_config.py, and configure the port, certificates path.

c.JupyterHub.port = 443
c.JupyterHub.confirm_no_ssl = False
c.JupyterHub.ssl_cert = '/etc/jupyterhub/ssl/jupyterhub.cer'
c.JupyterHub.ssl_key = '/etc/jupyterhub/ssl/jupyterhub.key'


# Launch the cluster
# launch_cluster/launch.py --help
# launch_cluster/launch.py seas_jupyterhub_May1717 ami-5dbe974a subnet-fd9bb4b4 subnet-54502979

launch_cluster/launch.py --worker_instance_type t2.small --custom_worker_ami ami-f3fa8de5 --manager_instance_type t2.medium --ignore_permissions true seas_jupyterhub_May1717 ami-5dbe974a subnet-fd9bb4b4 subnet-54502979



It might take between 10 to 20 minutes for the code to finish and the cluster to be ready.

Login to the new cluster manager 
In AWS EC2 dashboard, get the public IP of the manager you just created. The manager EC2 instance will have tag key "Name": and tag Value :"JUPYTER_HUB_[AZ]_seas_jupyterhub_May1717_MANAGER".
Browse to https://{MANAGER IP} (or http://{MANAGER IP} if you did not configure the SSL certificate),
login as user admin (youremail@domain) with empty password.


